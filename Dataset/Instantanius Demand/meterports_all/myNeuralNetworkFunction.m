function [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 03-Apr-2018 08:03:31.
%
% [Y,Xf,Af] = myNeuralNetworkFunction(X,Xi,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
%
%   Xi = 1x2 cell 1, initial 2 input delay states.
%   Each Xi{1,ts} = 6xQ matrix, initial states for input #1.
%
%   Ai = 2x0 cell 2, initial 2 layer delay states.
%   Each Ai{1,ts} = 10xQ matrix, initial states for layer #1.
%   Each Ai{2,ts} = 1xQ matrix, initial states for layer #2.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
%   Xf = 1x2 cell 1, final 2 input delay states.
%   Each Xf{1,ts} = 6xQ matrix, final states for input #1.
%
%   Af = 2x0 cell 2, final 0 layer delay states.
%   Each Af{1ts} = 10xQ matrix, final states for layer #1.
%   Each Af{2ts} = 1xQ matrix, final states for layer #2.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1_xoffset = [1;1;0;-1;-7155925;-357337.6172];
x1_step1_gain = [0.0869565217391304;0.333333333333333;2;1;1.23346894641674e-07;5.10373442132928e-07];
x1_step1_ymin = -1;

% Layer 1
b1 = [0.87325778185011704;-1.6306006116585534;-1.7976255595077939;1.6328274693030465;-0.13060894010339555;0.12350779666495829;-0.49201682481715414;1.1967728427867443;-1.5372914296722338;-1.4493932881842535];
IW1_1 = [-0.33297002371864803 -0.019915233298479943 -0.067946678798758264 1.533623144025833 -0.87831983928574164 0.69144017496162269 0.76359735751903746 -0.40194341231749448 0.27076354027370864 0.11213873643398022 0.28707374650854461 0.14128510790734455;0.0027344555865212771 0.59561303545101685 0.41267903950633783 -0.90623260303635655 -0.38393472080452495 -0.57887132584479839 -0.37465537079390249 0.09653457817711715 -0.48371470480828616 1.5289958142289823 0.1728366511591802 0.81609613401614767;0.54482926691374267 0.66919082594142176 -0.58067147942192598 1.2490113410579082 0.17813821268056584 0.60847733148138261 -0.38986732393930634 -0.62198107180816242 -0.10465186159412032 0.46164119786876412 0.17070880838485836 0.6089647324745362;-0.40451166523572618 0.59210705692533694 0.28091016490450516 -1.4720840650821827 0.39940947642263674 -0.16440354948895192 -0.72261024139482166 0.81125145430716394 0.15959630849265891 -0.66281172547056122 -0.25392320173728367 -0.41877076785222195;-0.77033485529254231 0.68794441384435823 0.29001976338723401 1.2231530502668182 0.30576146920692443 0.44568963414354901 -0.16222796150734961 0.055206802772310853 0.50155063556118085 -0.58501545404224387 -0.023466740812028267 -0.83241000867756765;0.64543805951042521 -0.36065633368972461 -0.16853720659253743 1.0330558051729148 0.25838369517904292 0.64637939225744001 0.58882232445138249 -0.33773510613853569 -0.82916392206471112 -0.90315168248504818 0.26516559090704123 0.35766729746911263;0.73013941047175046 -0.64109646509417306 -0.58876363009185184 0.92611102680177637 0.47079801772723806 0.56979835307173488 -0.11466639768523686 0.38134042918654187 0.19702936110030519 1.188681770885881 0.5223183839717328 -0.04412837885197031;0.1292223709592715 -0.676617211732776 0.0049322731079330428 -1.2287436690831124 -0.81885793605927015 -0.27266965739483578 0.10813905811967782 -0.16680820304581701 0.67088714574161457 0.71979656359853905 -0.77575619396778495 0.24308457730939065;-0.31303281039253361 0.6839079661128088 0.029846493254832161 -0.83514624934163384 0.059059673146700249 -0.32866375590424407 0.72580130004702037 -0.62736625019553227 -0.2987292229949936 1.2712910965616204 0.61621058617088476 -0.4806506462456811;-0.14429637725744635 0.16072614505140057 0.46282750498891034 -0.64316940439285497 0.14096283857556755 0.68032627547503366 0.63298278133412267 0.48470193795707123 0.88266932937644382 0.14967853660131453 -0.071225822426246033 -0.77750208637517737];

% Layer 2
b2 = 0.14780106068295162;
LW2_1 = [0.89580399455361381 -0.87170985269606338 -0.067801409783044386 0.057590125528009573 -0.024213631472296715 0.58843889386550963 0.66931783550263679 -0.54267737283255224 -0.3497164717577006 0.12829745254685077];

% Output 1
y1_step1_ymin = -1;
y1_step1_gain = 7.38661545279953e-08;
y1_step1_xoffset = -8578000;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;
if (nargin < 2), error('Initial input states Xi argument needed.'); end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
elseif ~isempty(Xi)
    Q = size(Xi{1},2);
else
    Q = 0;
end

% Input 1 Delay States
Xd1 = cell(1,3);
for ts=1:2
    Xd1{ts} = mapminmax_apply(Xi{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    Xd1{xdts} = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    tapdelay1 = cat(1,Xd1{mod(xdts-[1 2]-1,3)+1});
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% Final Delay States
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
Xf = [Xi(:,xits) X(:,xts)];
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
y = bsxfun(@minus,x,settings_xoffset);
y = bsxfun(@times,y,settings_gain);
y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
x = bsxfun(@minus,y,settings_ymin);
x = bsxfun(@rdivide,x,settings_gain);
x = bsxfun(@plus,x,settings_xoffset);
end
